#
## 2.1 More Sharks  -----------------------------------------------
# Lets return to our sharks vector from earlier. We can create a list called shark_length that contains
# max length in feet of different types of sharks. The name of sharks are used as tags.
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[-4]
# Confirm that you returned a vector and not a list
is.list(shark_length)
#Expected results
#[1] 12.6
#[1] FALSE
#
## 2.2 Lab grades ----------------------------------------------
# Here is a list of lab grades for imaginary lab section LL
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
# Add a new item is_participant = "Yes" to the list lab_grades
lab_grades[[is_participant]] <- "Yes"
# ============================
# Exercise 3. Bill Calculator
# ============================
#
# Scenario - suppose you went to tea shop today and you bought a cup of tea and 2 scones.
# There is a promotion today where if you buy a cup of tea and 2 scones you get 10% off your purchase.
# Sales tax in WA is 6.5%
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
# Expected result
# total_after_tax
# 9.11
#
# END #
sharks <- c("Hammerhead", "Great White", "Thresher")
# Scientists discovered a new deep-sea shark called a Goblin shark you want to add this to your vector of sharks
# Use the `c()` function to combine the `sharks` vector and the newly discovered "Goblin" shark
updated_sharks <- c(sharks, Goblin)
print(updated_sharks)
sharks <- c("Hammerhead", "Great White", "Thresher")
# Scientists discovered a new deep-sea shark called a Goblin shark you want to add this to your vector of sharks
# Use the `c()` function to combine the `sharks` vector and the newly discovered "Goblin" shark
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
# ==========================================
#title: "INFO 201 Lab 3 Debugging Exercise"
#date: "1/21/2020"
# ==========================================
#
# In groups of three, you will now work on the following exercises where you will practice:
#
# * Identifying whether an error is a syntax, semantic or logical error
# * Analyze an error message and be able to interpret it
# * Describe the steps of searching for solutions to errors
#
# =====================
# Exercise 1. Vectors
# =====================
#
# 1.1 Sharks -------------------------------------------------------
#
#  Use the combine (`c()`) function to create a vector for different types of shark
sharks <- c("Hammerhead", "Great White", "Thresher")
# Scientists discovered a new deep-sea shark called a Goblin shark you want to add this to your vector of sharks
# Use the `c()` function to combine the `sharks` vector and the newly discovered "Goblin" shark
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
# Results expected
# [1] "Hammerhead" "Great White" "Thresher" "Goblin"
#
## 1.2 Earthquakes ----------------------------------------------
#
# The following vector contains earthquake magnitudes for large earthquakes
# in the seattle area since the creation of the Richter Scale
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
# filter for earthquakes that were larger than 6.5
earthquakes[earthquakes > 6.5]
# Results expected
# [1] 6.8 7.3 7.1
#
## 1.3 Endangered animals ---------------------------------------
#
# Create a vector of endangered marine animals
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
# Vector of booleans (to filter the 'endangered' vector) where TRUE means that the endangered species is a mammal
filter <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE)
# Extract element in an index that is TRUE
print(endangered(filter))
# Expected results:
#[1] "Blue Whale"      "Florida Manatee" "Sea Otter"
#
# ===================
# Exercise 2. Lists
# ===================
#
## 2.1 More Sharks  -----------------------------------------------
# Lets return to our sharks vector from earlier. We can create a list called shark_length that contains
# max length in feet of different types of sharks. The name of sharks are used as tags.
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[-4]
# Confirm that you returned a vector and not a list
is.list(shark_length)
#Expected results
#[1] 12.6
#[1] FALSE
#
## 2.2 Lab grades ----------------------------------------------
# Here is a list of lab grades for imaginary lab section LL
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
# Add a new item is_participant = "Yes" to the list lab_grades
lab_grades[[is_participant]] <- "Yes"
# ============================
# Exercise 3. Bill Calculator
# ============================
#
# Scenario - suppose you went to tea shop today and you bought a cup of tea and 2 scones.
# There is a promotion today where if you buy a cup of tea and 2 scones you get 10% off your purchase.
# Sales tax in WA is 6.5%
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
# Expected result
# total_after_tax
# 9.11
#
# END #
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
# Vector of booleans (to filter the 'endangered' vector) where TRUE means that the endangered species is a mammal
filter <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE)
# Extract element in an index that is TRUE
print(endangered[filter])
# ==========================================
#title: "INFO 201 Lab 3 Debugging Exercise"
#date: "1/21/2020"
# ==========================================
#
# In groups of three, you will now work on the following exercises where you will practice:
#
# * Identifying whether an error is a syntax, semantic or logical error
# * Analyze an error message and be able to interpret it
# * Describe the steps of searching for solutions to errors
#
# =====================
# Exercise 1. Vectors
# =====================
#
# 1.1 Sharks -------------------------------------------------------
#
#  Use the combine (`c()`) function to create a vector for different types of shark
sharks <- c("Hammerhead", "Great White", "Thresher")
# Scientists discovered a new deep-sea shark called a Goblin shark you want to add this to your vector of sharks
# Use the `c()` function to combine the `sharks` vector and the newly discovered "Goblin" shark
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
# Results expected
# [1] "Hammerhead" "Great White" "Thresher" "Goblin"
#
## 1.2 Earthquakes ----------------------------------------------
#
# The following vector contains earthquake magnitudes for large earthquakes
# in the seattle area since the creation of the Richter Scale
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
# filter for earthquakes that were larger than 6.5
earthquakes[earthquakes > 6.5]
# Results expected
# [1] 6.8 7.3 7.1
#
## 1.3 Endangered animals ---------------------------------------
#
# Create a vector of endangered marine animals
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
# Vector of booleans (to filter the 'endangered' vector) where TRUE means that the endangered species is a mammal
filter <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE)
# Extract element in an index that is TRUE
print(endangered[filter])
# Expected results:
#[1] "Blue Whale"      "Florida Manatee" "Sea Otter"
#
# ===================
# Exercise 2. Lists
# ===================
#
## 2.1 More Sharks  -----------------------------------------------
# Lets return to our sharks vector from earlier. We can create a list called shark_length that contains
# max length in feet of different types of sharks. The name of sharks are used as tags.
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[-4]
# Confirm that you returned a vector and not a list
is.list(shark_length)
#Expected results
#[1] 12.6
#[1] FALSE
#
## 2.2 Lab grades ----------------------------------------------
# Here is a list of lab grades for imaginary lab section LL
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
# Add a new item is_participant = "Yes" to the list lab_grades
lab_grades[[is_participant]] <- "Yes"
# ============================
# Exercise 3. Bill Calculator
# ============================
#
# Scenario - suppose you went to tea shop today and you bought a cup of tea and 2 scones.
# There is a promotion today where if you buy a cup of tea and 2 scones you get 10% off your purchase.
# Sales tax in WA is 6.5%
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
# Expected result
# total_after_tax
# 9.11
#
# END #
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
# Add a new item is_participant = "Yes" to the list lab_grades
lab_grades[["is_participant"]] <- "Yes"
# ==========================================
#title: "INFO 201 Lab 3 Debugging Exercise"
#date: "1/21/2020"
# ==========================================
#
# In groups of three, you will now work on the following exercises where you will practice:
#
# * Identifying whether an error is a syntax, semantic or logical error
# * Analyze an error message and be able to interpret it
# * Describe the steps of searching for solutions to errors
#
# =====================
# Exercise 1. Vectors
# =====================
#
# 1.1 Sharks -------------------------------------------------------
#
#  Use the combine (`c()`) function to create a vector for different types of shark
sharks <- c("Hammerhead", "Great White", "Thresher")
# Scientists discovered a new deep-sea shark called a Goblin shark you want to add this to your vector of sharks
# Use the `c()` function to combine the `sharks` vector and the newly discovered "Goblin" shark
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
# Results expected
# [1] "Hammerhead" "Great White" "Thresher" "Goblin"
#
## 1.2 Earthquakes ----------------------------------------------
#
# The following vector contains earthquake magnitudes for large earthquakes
# in the seattle area since the creation of the Richter Scale
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
# filter for earthquakes that were larger than 6.5
earthquakes[earthquakes > 6.5]
# Results expected
# [1] 6.8 7.3 7.1
#
## 1.3 Endangered animals ---------------------------------------
#
# Create a vector of endangered marine animals
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
# Vector of booleans (to filter the 'endangered' vector) where TRUE means that the endangered species is a mammal
filter <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE)
# Extract element in an index that is TRUE
print(endangered[filter])
# Expected results:
#[1] "Blue Whale"      "Florida Manatee" "Sea Otter"
#
# ===================
# Exercise 2. Lists
# ===================
#
## 2.1 More Sharks  -----------------------------------------------
# Lets return to our sharks vector from earlier. We can create a list called shark_length that contains
# max length in feet of different types of sharks. The name of sharks are used as tags.
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[-4]
# Confirm that you returned a vector and not a list
is.list(shark_length)
#Expected results
#[1] 12.6
#[1] FALSE
#
## 2.2 Lab grades ----------------------------------------------
# Here is a list of lab grades for imaginary lab section LL
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
# Add a new item is_participant = "Yes" to the list lab_grades
lab_grades[["is_participant"]] <- "Yes"
# ============================
# Exercise 3. Bill Calculator
# ============================
#
# Scenario - suppose you went to tea shop today and you bought a cup of tea and 2 scones.
# There is a promotion today where if you buy a cup of tea and 2 scones you get 10% off your purchase.
# Sales tax in WA is 6.5%
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
# Expected result
# total_after_tax
# 9.11
#
# END #
sharks <- c("Hammerhead", "Great White", "Thresher")
# Scientists discovered a new deep-sea shark called a Goblin shark you want to add this to your vector of sharks
# Use the `c()` function to combine the `sharks` vector and the newly discovered "Goblin" shark
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
# Results expected
# [1] "Hammerhead" "Great White" "Thresher" "Goblin"
#
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
# filter for earthquakes that were larger than 6.5
earthquakes[earthquakes > 6.5]
# Results expected
# [1] 6.8 7.3 7.1
#
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
# Vector of booleans (to filter the 'endangered' vector) where TRUE means that the endangered species is a mammal
filter <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE)
# Extract element in an index that is TRUE
print(endangered[filter])
# Expected results:
#[1] "Blue Whale"      "Florida Manatee" "Sea Otter"
#
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[-4]
# Confirm that you returned a vector and not a list
is.list(shark_length)
## 2.2 Lab grades ----------------------------------------------
# Here is a list of lab grades for imaginary lab section LL
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
# Add a new item is_participant = "Yes" to the list lab_grades
lab_grades[["is_participant"]] <- "Yes"
View(lab_grades)
View(lab_grades)
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
# Expected result
# total_after_tax
# 9.11
#
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) * (1 - discount)
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) * (1 - discount)
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount * (1 + sales_tax)
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[-4]
# Confirm that you returned a vector and not a list
is.list(shark_length)
shark_length[-4]
shark_length[length(shark_length)]
shark_length[length(shark_length)]
# Confirm that you returned a vector and not a list
is.list(shark_length)
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[["goblin"]]
# Confirm that you returned a vector and not a list
is.list(shark_length)
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
result <- shark_length[["goblin"]]
# Confirm that you returned a vector and not a list
is.list(result)
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[[4]]
# Confirm that you returned a vector and not a list
is.list(shark_length[[4]])
my_breakfast <- c("coffe", "coffee", "more coffee")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("sandwich", "pickle")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
print(meals)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("steak", "7 up")
print(meals)
employees <- paste("Employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == "Employee 57", "salaries_2018"])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
biggest_raise <- max(salaries$adjustments)
salaries[salaries$adjustments == biggest_raise, "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == biggest_raise, "employees"]
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$got_raise == FALSE, ]
mean(paycut$adjustments)
# or we can say mean(salaries[salaries$got_raise == FALSE, ]$adjustments)
# or we can say mean(salaries[salaries$got_raise == FALSE, "adjustments"])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# What was the largest decrease in salaries between the two years?
salaries[salaries$adjustments == min(salaries$adjustments)]
# What was the largest decrease in salaries between the two years?
salaries[salaries$adjustments == min(salaries$adjustments), "adjustments"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustments == min(salaries$adjustments), "employees"]
# What was the average salary change?
mean(salaries$adjustments)
setwd("E:/Study/Winter 2020/201 INFO/exercises/book-exercises/chapter-10-exercises/exercise-2")
setwd("E:/Study/Winter 2020/201 INFO/exercises/book-exercises/chapter-10-exercises/exercise-2")
# Write a .csv file of your salary data to your working directory
write.csv(salaries)
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "output.csv")
