head(5) %>%
select("Name", "Photo")
return (as.data.frame(df))
}
result <- get_trending_table("person", "week")
View(result)
get_trending_table <- function(person, week) {
endpoint <- paste0("trending/", "person", "/", "week")
search_uri <- paste0(base_uri, endpoint)
query_list = list("media_type" = person, "time_window" = week, "api_key" = tmdb_key)
response <- GET(search_uri, query = query_list)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
df <- as.data.frame(data)
df <- filter(df ,results.known_for_department == "Acting") %>%
mutate(Name = results.name) %>%
mutate("Photo" = paste0("![", Name ,"]", "(", base_uri_pic, results.profile_path), ")") %>%
head(5) %>%
select("Name", "Photo")
name <- df$Name
photo <- df$Photo
print(is.data.frame(name))
return (as.data.frame(df))
}
result <- get_trending_table("person", "week")
get_trending_table <- function(person, week) {
endpoint <- paste0("trending/", "person", "/", "week")
search_uri <- paste0(base_uri, endpoint)
query_list = list("media_type" = person, "time_window" = week, "api_key" = tmdb_key)
response <- GET(search_uri, query = query_list)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
df <- as.data.frame(data)
df <- filter(df ,results.known_for_department == "Acting") %>%
mutate(Name = results.name) %>%
mutate("Photo" = paste0("![", Name ,"]", "(", base_uri_pic, results.profile_path), ")") %>%
head(5) %>%
select("Name", "Photo")
name <- df$Name
photo <- df$Photo
result <- data.frame(name, photo)
print(is.data.frame(result))
return (as.data.frame(df))
}
result <- get_trending_table("person", "week")
get_trending_table <- function(person, week) {
endpoint <- paste0("trending/", "person", "/", "week")
search_uri <- paste0(base_uri, endpoint)
query_list = list("media_type" = person, "time_window" = week, "api_key" = tmdb_key)
response <- GET(search_uri, query = query_list)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
df <- as.data.frame(data)
print(is.data.frame(df))
df <- filter(df ,results.known_for_department == "Acting") %>%
mutate(Name = results.name) %>%
mutate("Photo" = paste0("![", Name ,"]", "(", base_uri_pic, results.profile_path), ")") %>%
head(5) %>%
select("Name", "Photo")
name <- df$Name
photo <- df$Photo
result <- data.frame(name, photo)
return (result)
}
result <- get_trending_table("person", "week")
get_trending_table <- function(person, week) {
endpoint <- paste0("trending/", "person", "/", "week")
search_uri <- paste0(base_uri, endpoint)
query_list = list("media_type" = person, "time_window" = week, "api_key" = tmdb_key)
response <- GET(search_uri, query = query_list)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
df <- as.data.frame(data)
print(is.data.frame(df))
df <- filter(df ,results.known_for_department == "Acting") %>%
mutate(Name = results.name) %>%
mutate("Photo" = paste0("![", Name ,"]", "(", base_uri_pic, results.profile_path), ")") %>%
head(5) %>%
select("Name", "Photo")
name <- df$Name
photo <- df$Photo
result <- data.frame(name, photo)
return (result)
}
result <- get_trending_table("person", "week")
get_trending_table <- function(person, week) {
endpoint <- paste0("trending/", "person", "/", "week")
search_uri <- paste0(base_uri, endpoint)
query_list = list("media_type" = person, "time_window" = week, "api_key" = tmdb_key)
response <- GET(search_uri, query = query_list)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
print(is.data.frame(data))
df <- as.data.frame(data)
print(is.data.frame(df))
df <- filter(df ,results.known_for_department == "Acting") %>%
mutate(Name = results.name) %>%
mutate("Photo" = paste0("![", Name ,"]", "(", base_uri_pic, results.profile_path), ")") %>%
head(5) %>%
select("Name", "Photo")
name <- df$Name
photo <- df$Photo
result <- data.frame(name, photo)
return (result)
}
result <- get_trending_table("person", "week")
get_actor_data <- function(name) {
endpoint <- paste0("search/", "person")
search_uri <- paste0(base_uri, endpoint)
query_list = list("name" = name, "api_key" = tmdb_key)
response <- GET(search_uri, query = query_list)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
df <- as.data.frame(data)
result <- head(df, 1)
return (result)
}
result2 <- get_actor_data("Brad_Pitt")
View(result2)
get_actor_data <- function(name) {
endpoint <- paste0("search/", "person")
search_uri <- paste0(base_uri, endpoint)
query_list = list("query" = name, "api_key" = tmdb_key)
response <- GET(search_uri, query = query_list)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
df <- as.data.frame(data)
result <- head(df, 1)
return (result)
}
result2 <- get_actor_data("query")
View(result2)
View(result2)
get_actor_data <- function(name) {
endpoint <- paste0("search/", "person")
search_uri <- paste0(base_uri, endpoint)
query_list = list("query" = name, "api_key" = tmdb_key)
response <- GET(search_uri, query = query_list)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
df <- as.data.frame(data)
result <- head(df, 1)
return (response)
}
result2 <- get_actor_data("query")
View(result2)
get_actor_data <- function(name) {
endpoint <- paste0("search/", "person")
search_uri <- paste0(base_uri, endpoint)
query_list = list("query" = name, "api_key" = tmdb_key)
response <- GET(search_uri, query = query_list)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
df <- as.data.frame(data)
result <- head(df, 1)
return (response)
}
result2 <- get_actor_data("query")
View(result2)
get_actor_data <- function(name) {
endpoint <- paste0("search/", "person")
search_uri <- paste0(base_uri, endpoint)
query_list = list("query" = name, "api_key" = tmdb_key)
response <- GET(search_uri, query = query_list)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
df <- as.data.frame(data)
result <- head(df, 1)
return (df)
}
result2 <- get_actor_data("query")
View(result2)
get_actor_data <- function(query) {
endpoint <- paste0("search/", "person")
search_uri <- paste0(base_uri, endpoint)
query_list = list("query" = query, "api_key" = tmdb_key)
response <- GET(search_uri, query = query_list)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
df <- as.data.frame(data)
result <- head(df, 1)
return (df)
}
result2 <- get_actor_data("query")
View(result2)
get_actor_data <- function(query) {
endpoint <- paste0("search/", "person")
search_uri <- paste0(base_uri, endpoint)
query_list = list("query" = query, "api_key" = tmdb_key)
response <- GET(search_uri, query = query_list)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
df <- as.data.frame(data)
result <- head(df, 1)
return (result)
}
result2 <- get_actor_data("query")
View(result2)
install.packages("ggplot2")
library("ggplot2")
ggplot(data = midwest) +
geom_point(mapping = ase(x = percollege, y = percadultpoverty))
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty))
ggplot(data = midwest) +
geom_col(mapping = aes(x = state, y = poptotal))
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
ggplot(data = midwest, mapping = aes(x = percollege, y = percadultpoverty)) +
geom_point() + # uses the default x and y mappings
geom_smooth() + # uses the default x and y mappings
geom_point(mapping = aes(y = percchildbelowpovert)) # uses own y mapping
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
install.packages("hexbin")
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty, color = state))
ad the `ggplot2` package
# You will also want to load `dplyr`
library(dplyr)
library(ggplot2)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
7diamonds
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
nrows(dismonds)
nrow(dismonds)
nrow(diamonds)
sample(diamonds, 1000)
diamonds_sample <-  sample_n(diamonds, 1000)
ggplot(data = diamonds_sample)
View(diamonds_sample)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = carat))
plot(diamonds_sample$carat, diamonds_sample$price)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = colors(blue)))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = "blue"))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), color = "red", alpha = 0.3)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, red = "red"), alpha = 0.3)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = "blue"))
plot1 <- ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = "blue"), alpha = 0.3)
plot2 <- ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), color = "blue", alpha = 0.3)
View(plot1)
View(plot2)
plot2 <- ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), color = "blue", alpha = 0.3)
plot2 <- ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), color = "blue", alpha = 0.3)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), color = "blue", alpha = 0.3)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = "blue"), alpha = 0.3)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = "blue"), alpha = 0.3)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), color = "blue", alpha = 0.3)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = "blue"), alpha = 0.3)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = "blue"))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, size = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, color = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price), color = price)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, color = price))
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = cut, color = cut))
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty, color = state)) +
scale_x_reverse()
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty, color = state)) +
scale_x_reverse()
scale_y_continuous(limit = c(0, 100))
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty, color = state)) +
scale_x_reverse()
scale_y_continuous(limits = c(0, 100))
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty, color = state)) +
scale_x_reverse()
scale_y_continuous(limits = c(0, 40))
scale_color_hue(l = 20, c = 30)
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty, color = state)) +
scale_x_reverse()
scale_y_continuous(limits = c(0, 40))
scale_color_brewer(palette = "Set3")
scale_color_hue(l = 20, c = 30)
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty, color = state)) +
scale_x_reverse() +
scale_y_continuous(limits = c(0, 40)) +
scale_color_brewer(palette = "Set3") +
scale_color_hue(l = 20, c = 30)
ggplot(top_10) +
geom_col(mapping = aes(x = location, y = poptotal)) +
coord_flip() # switch the orientation of the x- and y-axes
top_10 <- midwest %>%
top_n(10, wt = poptotal) %>%
unite(county_state, county, state, sep = ", ") %>% # combine state + county
arrange(poptotal) %>% # sort the data by population
mutate(location = factor(county_state, county_state)) # set the row order
ggplot(top_10) +
geom_col(mapping = aes(x = location, y = poptotal)) +
coord_flip() # switch the orientation of the x- and y-axes
top_10 <- midwest %>%
top_n(10, wt = poptotal) %>%
unite(county_state, county, state, sep = ", ") %>% # combine state + county
arrange(poptotal) %>% # sort the data by population
mutate(location = factor(county_state, county_state)) # set the row order
top_10 <- midwest %>%
top_n(10, wt = poptotal) %>%
#  unite(county_state, county, state, sep = ", ") %>% # combine state + county
arrange(poptotal) %>% # sort the data by population
mutate(location = factor(county_state, county_state)) # set the row order
top_10 <- midwest %>%
top_n(10, wt = poptotal) %>%
unite(county_state, county, state, sep = ", ") %>% # combine state + county
arrange(poptotal) %>% # sort the data by population
mutate(location = factor(county_state, county_state)) # set the row order
ggplot(mpg, aes(x = factor(1), fill = factor(cyl))) +
geom_bar(width = 1) +
coord_polar(theta = "y")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = cut))
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = cut)) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_boxplot(mappingg = aes(x = color, y = price)) +
scale_y_log10()
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
# How does the logarithmic scale change the data presentation?
ggplot(data = diamonds_sample) +
geom_violin(mapping = aes(x = color,  y = price)) +
scale_y_log10()
ggplot(data = diamonds_sample) +
geom_bin2d(mapping = aes(x = color, y = price)) +
scale_x_log10() +
scale_y_log10()
ggplot(data = diamonds_sample) +
geom_bin2d(mapping = aes(x = carat, y = price)) +
scale_x_log10() +
scale_y_log10()
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "PuOr")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Dakr2")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Purples")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Purples", direciton = -1)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Purples", direciton = -1)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(~cut)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = color)) +
facet_wrap(~cut)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = color)) +
facet_wrap(~clarity)
setwd("E:/Study/Winter 2020/201 INFO/exercises/book-exercises/chapter-16-exercises/exercise-2")
?ggsave()
library("ggplot2")
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
ggplot(data = diamonds) +
geom_col(mapping = aes(x = price, y = cuts, fill = clarity))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = price, y = cut, fill = clarity))
setwd("E:/Study/Winter 2020/201 INFO/exercises/book-exercises/chapter-18-exercises/exercise-1")
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R") # go to and run that file.
query_para <- list("api-key" = nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
query_list = list("api_key" = nyt_key, "movie_name" = movie_name)
response <- GET(base_uri, query = query_list)
response
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
# What kind of data structure did this produce? A data frame? A list?
data
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(data)
# Flatten the movie reviews content into a data structure called `reviews`
flatten(data)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(as.data.frame(data))
View(data)
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
query_list = list("api_key" = nyt_key, "movie_name" = "007")
response <- GET(base_uri, query = query_list)
response
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
View(data)
ggplot(data = diamonds) +
geom_col(mapping = aes(x = price, y = cut, fill = clarity)) +
scale_y_reverse()
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "dark2")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Dark2")
ggsave("my-plot.png")
ggplot(data = diamonds) +
geom_col(mapping = aes(x = price, y = cut, fill = clarity)) +
scale_y_reverse()
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity)) +
scale_y_reverse()
ggplot(data = diamonds) +
geom_col(mapping = aes(x = price, y = cut, fill = clarity))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = price, y = cut, fill = clarity))
ggplot(data = diamonds) +
geom_col(mapping = aes(y = price, x = cut, fill = clarity)) +
ggplot(data = diamonds) +
geom_col(mapping = aes(x = price, y = cut, fill = clarity))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = price, y = cut, fill = clarity))
ggplot(data = diamonds) +
geom_col(mapping = aes(y = price, x = cut, fill = clarity))
